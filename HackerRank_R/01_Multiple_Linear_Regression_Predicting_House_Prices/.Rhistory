# FMAGX,SBUX
cor.test(x=lab4Returns.z[,"FMAGX"], y=lab4Returns.z[,"SBUX"])
jarque.bera.test(lab4Returns.z[,"VBLTX"])
jarque.bera.test(lab4Returns.z[,"FMAGX"])
jarque.bera.test(lab4Returns.z[,"SBUX"])
plot(VBLTX.VaR.boot)
# plot bootstrap distribution
plot(VBLTX.sd.boot)
plot(VBLTX.FMAGX.cor.boot)
plot(VBLTX.mean.boot)
# lab9.r		 lab9 calculations
#
# author: Eric Zivot
# created: November 1, 2008
# revised: August 11, 2011
#
# comments:
# Data for the lab are in the Excel file econ424lab7returns.csv, which contains monthly continuously
# compounded returns on Boeing, Nordstrom, Starbucks and Microsoft stocks over
# the period March, 1995 through January, 2000.
options(digits=4, width=70)
library("zoo")
# load the data into a zoo object using the zoo function read.csv
source(file="http://spark-public.s3.amazonaws.com/compfinance/R%20code/portfolio.r")
lab8.df = read.csv("http://spark-public.s3.amazonaws.com/compfinance/R%20code/lab9returns.csv",
stringsAsFactors=F)
colnames(lab9.df)
order.by=as.yearmon(lab9.df[, 1], format="%b-%y"))
lab9.z = zoo(x=lab9.df[, -1],
order.by=as.yearmon(lab9.df[, 1], format="%b-%y"))
lab9.df = read.csv("http://spark-public.s3.amazonaws.com/compfinance/R%20code/lab9returns.csv",
stringsAsFactors=F)
colnames(lab9.df)
lab9.z = zoo(x=lab9.df[, -1],
order.by=as.yearmon(lab9.df[, 1], format="%b-%y"))
start(lab9.z)
end(lab9.z)
colnames(lab9.z)
my.panel <- function(...) {
lines(...)
abline(h=0)
}
plot(lab9.z, lwd=2, panel=my.panel, col="blue")
# all on the same graph
plot(lab9.z, plot.type = "single", main="lab9 returns",
col=1:4, lwd=2)
abline(h=0)
legend(x="bottomleft", legend=colnames(lab7.z), col=1:4, lwd=2)
legend(x="bottomleft", legend=colnames(lab7.z), col=1:4, lwd=2)
legend(x="bottomleft", legend=colnames(lab7.z), col=1:4, lwd=2)
#
pairs(coredata(lab9.z), col="blue", pch=16)
#
# 5. Compute estimates of CER model parameters
#
muhat.vals = apply(lab9.z, 2, mean)
muhat.vals
sigma2hat.vals = apply(lab9.z, 2, var)
sigma2hat.vals
sigmahat.vals = apply(lab9.z, 2, sd)
sigmahat.vals
cov.mat = var(lab9.z)
cov.mat
cor.mat = cor(lab9.z)
cor.mat
write.csv(muhat.vals, file="C:\\Users\\Lukasz\\Documents\\Intro_to_Computational_Finance\\Week9\\muhatVals.csv")
write.csv(cov.mat, file="C:\\Users\\Lukasz\\Documents\\Intro_to_Computational_Finance\\Week9\\covMat.csv")
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
plot(gmin.port, col="blue")
t(gmin.port$weights)%*%cov.mat%*%e1.port$weights
e.frontier = efficient.frontier(muhat.vals, cov.mat, alpha.min=-1, alpha.max=1)
summary(e.frontier)
plot(e.frontier, plot.assets=T, col="blue", pch=16, cex=2)
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
plot(tan.port, col="blue")
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
plot(tan.port, col="blue")
# efficient portfolio of T-bills + tangency that has the same SD as sbux
names(tan.port)
x.tan = sigmahat.vals["Starbucks"]/tan.port$sd
x.tan
mu.pe = 0.005 + x.tan*(tan.port$er - 0.005)
mu.pe
stopifnot("package:quadprog" %in% search()  ||  require("quadprog",quietly = TRUE) )
getPortfolio <-
function(er, cov.mat, weights)
stopifnot("package:quadprog" %in% search()  ||  require("quadprog",quietly = TRUE) )
getPortfolio <-
function(er, cov.mat, weights)
{
# contruct portfolio object
#
# inputs:
# er				   N x 1 vector of expected returns
# cov.mat  		 N x N covariance matrix of returns
# weights			 N x 1 vector of portfolio weights
#
# output is portfolio object with the following elements
# call				original function call
# er				  portfolio expected return
# sd				  portfolio standard deviation
# weights			N x 1 vector of portfolio weights
#
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
weights <- as.vector(weights)
names(weights) = names(er)
er <- as.vector(er)					# assign names if none exist
if(length(er) != length(weights))
stop("dimensions of er and weights do not match")
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("dimensions of er and cov.mat do not match")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
#
# create portfolio
#
er.port <- crossprod(er,weights)
sd.port <- sqrt(weights %*% cov.mat %*% weights)
ans <- list("call" = call,
"er" = as.vector(er.port),
"sd" = as.vector(sd.port),
"weights" = weights)
class(ans) <- "portfolio"
ans
}
?match.call
asset.names <- names(er)
weights <- as.vector(weights)
names(weights) = names(er)
er <- as.vector(er)					# assign names if none exist
if(length(er) != length(weights))
stop("dimensions of er and weights do not match")
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("dimensions of er and cov.mat do not match")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
options(digits=4, width=70)
library(PerformanceAnalytics)
library(quadprog)
# load portfolio theory functions
# source portfolio functions
source(file="http://faculty.washington.edu/ezivot/econ424/portfolio.r")
asset.names <- c("MSFT", "NORD", "SBUX")
mu.vec = c(0.0427, 0.0015, 0.0285)
names(mu.vec) = asset.names
sigma.mat = matrix(c(0.0100, 0.0018, 0.0011,
0.0018, 0.0109, 0.0026,
0.0011, 0.0026, 0.0199),
nrow=3, ncol=3)
dimnames(sigma.mat) = list(asset.names, asset.names)
mu.vec
sigma.mat
sd.vec = sqrt(diag(sigma.mat))
#
# global minimum variance portfolio with no-short sales
#
# unconstrained solution
gmin.port = globalMin.portfolio(mu.vec, sigma.mat)
gmin.port
# unconstrained solution
gmin.port = globalMin.portfolio(mu.vec, sigma.mat)
gmin.port
# set restriction matrices
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(rep(1,3), diag(3))
b.vec = c(1, rep(0,3))
D.mat
d.vec
A.mat
b.vec
# use solve.QP to minimize portfolio variance
args(solve.QP)
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=1)
class(qp.out)
names(qp.out)
qp.out$solution
sum(qp.out$solution)
qp.out$value
# compute mean, variance and sd
w.gmin.ns = qp.out$solution
names(w.gmin.ns) = names(mu.vec)
w.gmin.ns
er.gmin.ns = as.numeric(crossprod(w.gmin.ns, mu.vec))
er.gmin.ns
var.gmin.ns = as.numeric(t(w.gmin.ns)%*%sigma.mat%*%w.gmin.ns)
var.gmin.ns
sqrt(var.gmin.ns)
# compute and plot efficient frontier with short-sales
ef <- efficient.frontier(mu.vec, sigma.mat, alpha.min=0,
alpha.max=1, nport=10)
ef$weights
plot(ef$sd, ef$er, type="b", ylim=c(0.02, 0.05), xlim=c(0.06, 0.11),
pch=16, col="blue", cex=2, ylab=expression(mu[p]), xlab=expression(sigma[p]))
points(sd.vec, mu.vec, pch=16, col="black", cex=2)
text(sd.vec, mu.vec, labels=asset.names, pos=4)
# compute efficient frontier with no-short sales
mu.vals = seq(er.gmin.ns, max(mu.vec), length.out=10)
w.mat = matrix(0, length(mu.vals), 3)
sd.vec = rep(0, length(sd.vec))
colnames(w.mat) = names(mu.vec)
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(mu.vec, rep(1,3), diag(3))
for (i in 1:length(mu.vals)) {
b.vec = c(mu.vals[i],1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
w.mat[i, ] = qp.out$solution
sd.vec[i] = sqrt(qp.out$value)
}
w.mat
# compute efficient frontier with no-short sales
mu.vals = seq(er.gmin.ns, max(mu.vec), length.out=10)
w.mat = matrix(0, length(mu.vals), 3)
sd.vec = rep(0, length(sd.vec))
colnames(w.mat) = names(mu.vec)
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(mu.vec, rep(1,3), diag(3))
for (i in 1:length(mu.vals)) {
b.vec = c(mu.vals[i],1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
w.mat[i, ] = qp.out$solution
sd.vec[i] = sqrt(qp.out$value)
}
w.mat
points(sd.vec, mu.vals, type="b", pch=16, col="red", cex=1.5)
# illustrate infeasible portfolio
# set target return equal to 0.08
b.vec = c(0.08,1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
cov.mat
cor.mat
gmin.port
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
plot(gmin.port, col="blue")
mu.target = max(muhat.vals)
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target)
e1.port
# illustrate infeasible portfolio
# set target return equal to 0.08
b.vec = c(0.08,1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
# compute and plot efficient frontier with short-sales
ef <- efficient.frontier(mu.vec, sigma.mat, alpha.min=0,
alpha.max=1, nport=10)
ef$weights
plot(ef$sd, ef$er, type="b", ylim=c(0.02, 0.05), xlim=c(0.06, 0.11),
pch=16, col="blue", cex=2, ylab=expression(mu[p]), xlab=expression(sigma[p]))
points(sd.vec, mu.vec, pch=16, col="black", cex=2)
text(sd.vec, mu.vec, labels=asset.names, pos=4)
# compute efficient frontier with no-short sales
mu.vals = seq(er.gmin.ns, max(mu.vec), length.out=10)
w.mat = matrix(0, length(mu.vals), 3)
sd.vec = rep(0, length(sd.vec))
colnames(w.mat) = names(mu.vec)
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(mu.vec, rep(1,3), diag(3))
for (i in 1:length(mu.vals)) {
b.vec = c(mu.vals[i],1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
w.mat[i, ] = qp.out$solution
sd.vec[i] = sqrt(qp.out$value)
}
w.mat
points(sd.vec, mu.vals, type="b", pch=16, col="red", cex=1.5)
# compute tangency portfolio with rf = 0.005
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.005)
summary(tan.port)
plot(tan.port, col="blue")
TAN.PORT
tan.port
e.frontier
efficient.frontier(er = muhat.vals, cov.mat = cov.mat, alpha= 0.5)
args(efficient.frontier)
efficient.frontier(er = muhat.vals, cov.mat = cov.mat, alpha.min = 0.5, alpha.max=0.5)
summary(tan.port)
points(sd.vec, mu.vals, type="b", pch=16, col="red", cex=1.5)
# illustrate infeasible portfolio
# set target return equal to 0.08
b.vec = c(0.08,1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
# portfolioTheoryNoShortSales.r
#
# Examples used in Portfolio Theory with Matrix Algebra Chapter
#
# Author: Eric Zivot
# Created: August 7, 2012
# Revision history:
options(digits=4, width=70)
library(PerformanceAnalytics)
library(quadprog)
# load portfolio theory functions
# source portfolio functions
source(file="http://faculty.washington.edu/ezivot/econ424/portfolio.r")
################################################################################
# 3 asset example
################################################################################
asset.names <- c("MSFT", "NORD", "SBUX")
mu.vec = c(0.0427, 0.0015, 0.0285)
names(mu.vec) = asset.names
sigma.mat = matrix(c(0.0100, 0.0018, 0.0011,
0.0018, 0.0109, 0.0026,
0.0011, 0.0026, 0.0199),
nrow=3, ncol=3)
dimnames(sigma.mat) = list(asset.names, asset.names)
mu.vec
sigma.mat
sd.vec = sqrt(diag(sigma.mat))
#
# global minimum variance portfolio with no-short sales
#
# unconstrained solution
gmin.port = globalMin.portfolio(mu.vec, sigma.mat)
gmin.port
# set restriction matrices
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(rep(1,3), diag(3))
b.vec = c(1, rep(0,3))
D.mat
d.vec
A.mat
b.vec
# use solve.QP to minimize portfolio variance
args(solve.QP)
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=1)
class(qp.out)
names(qp.out)
qp.out$solution
sum(qp.out$solution)
qp.out$value
# compute mean, variance and sd
w.gmin.ns = qp.out$solution
names(w.gmin.ns) = names(mu.vec)
w.gmin.ns
er.gmin.ns = as.numeric(crossprod(w.gmin.ns, mu.vec))
er.gmin.ns
var.gmin.ns = as.numeric(t(w.gmin.ns)%*%sigma.mat%*%w.gmin.ns)
var.gmin.ns
sqrt(var.gmin.ns)
# compute and plot efficient frontier with short-sales
ef <- efficient.frontier(mu.vec, sigma.mat, alpha.min=0,
alpha.max=1, nport=10)
ef$weights
plot(ef$sd, ef$er, type="b", ylim=c(0.02, 0.05), xlim=c(0.06, 0.11),
pch=16, col="blue", cex=2, ylab=expression(mu[p]), xlab=expression(sigma[p]))
points(sd.vec, mu.vec, pch=16, col="black", cex=2)
text(sd.vec, mu.vec, labels=asset.names, pos=4)
# compute efficient frontier with no-short sales
mu.vals = seq(er.gmin.ns, max(mu.vec), length.out=10)
w.mat = matrix(0, length(mu.vals), 3)
sd.vec = rep(0, length(sd.vec))
colnames(w.mat) = names(mu.vec)
D.mat = 2*sigma.mat
d.vec = rep(0, 3)
A.mat = cbind(mu.vec, rep(1,3), diag(3))
for (i in 1:length(mu.vals)) {
b.vec = c(mu.vals[i],1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
w.mat[i, ] = qp.out$solution
sd.vec[i] = sqrt(qp.out$value)
}
w.mat
points(sd.vec, mu.vals, type="b", pch=16, col="red", cex=1.5)
# illustrate infeasible portfolio
# set target return equal to 0.08
b.vec = c(0.08,1,rep(0,3))
qp.out = solve.QP(Dmat=D.mat, dvec=d.vec,
Amat=A.mat, bvec=b.vec, meq=2)
gmin.port
?cnorm
?snorm
?rnorm
?qnorm(0.05,gmin.port$er,gmin.port$sd)
qnorm(0.05,gmin.port$er,gmin.port$sd)
-0.09465*50000
-0.09465*50000
-0.09465*5000
1.04^3
1/(1.04^3)
"C" + "a"
paste("C", "a")
paste("C", "a", collapse="")
paste0("C", "a", collapse="")
varnames[1]<-5
varnames<-[]
varnames<-vector()
varnames[1]<-'5'
for (ii in 1:F){
varnames[ii]<-paste0('var', as.character(ii))
}
paste0("C", "a", collapse="")
varnames
for (ii in 1:F){
varnames[ii]<-paste0('var', as.character(ii))
}
varnames
F
l
close(con)
setwd("~/Lukasz/Learning/HackerRank_R/01_Multiple_Linear_Regression_Predicting_House_Prices")
fileName="input.txt"
con=file(fileName,open="r")
inp=readLines(con)
close(con)
l<-as.numeric(strsplit(inp[1],"\\s+",perl = TRUE)[[1]])
F<-l[1]
N<-l[2]
data.train<-matrix(nrow = N, ncol = 3)
for (i in 1:N){
data.train[i,]<-as.numeric(strsplit(inp[i+1],"\\s+",perl = TRUE)[[1]])
}
df.train<-data.frame(data.train)
varnames<-vector()
for (ii in 1:F){
varnames[ii]<-paste0('var', as.character(ii))
}
varnames
c(varnames, "HP")
names(df.train)<-c(varnames, "HP")
df.train
l<-as.numeric(strsplit(inp[1],"\\s+",perl = TRUE)[[1]])
F<-l[1]
N<-l[2]
# training data
data.train<-matrix(nrow = N, ncol = 3)
for (i in 1:N){
data.train[i,]<-as.numeric(strsplit(inp[i+1],"\\s+",perl = TRUE)[[1]])
}
df.train<-data.frame(data.train)
varnames<-vector()
for (ii in 1:F){
varnames[ii]<-paste0('var', as.character(ii))
}
names(df.train)<-c(varnames, "HP")
# test data
K<-as.numeric(strsplit(inp[N+2],"\\s+",perl = TRUE)[[1]])
data.test<-matrix(nrow = K, ncol = 2)
for (i in 1:K){
data.test[i,]<-as.numeric(strsplit(inp[i+N+2],"\\s+",perl = TRUE)[[1]])
}
df.test<-data.frame(data.test)
names(df.test)<-c(varnames)
df.test
lm.1<-lm(df.train$HP ~ df.train[,varnames])
lm.1<-lm(df.train$HP ~ df.train[,c(varnames)])
df.test[varnames]
lm.1<-lm(df.train$HP ~ df.train[varnames])
df.train[varnames]
df.train
lm.1<-lm(df.train$HP ~ (df.train[varnames]))
lm.1<-lm(df.train$HP ~ df.test)
lm.1<-lm(df.train$HP ~ as.matrix(df.train[varnames]))
summary(lm.1)
lm.1$coefficients
par(mfrow = c(2, 2))
lm.1<-lm(df.train$HP ~ as.matrix(df.train[varnames]))
par(mfrow = c(2, 2))
plot(lm.1)
anova(lm.1)
sim<-predict.lm(lm.1, newdata=df.test)
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2:3]) + lm.1$coefficients[1]
par(mfrow = c(1,1))
plot(sim)
writeLines(as.character(round(sim, digits = 3)))
lm.1<-lm(df.train$HP ~ as.matrix(df.train[varnames]))
par(mfrow = c(2, 2))
plot(lm.1)
anova(lm.1)
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2:3]) + lm.1$coefficients[1]
par(mfrow = c(1,1))
plot(sim)
writeLines(as.character(round(sim, digits = 3)))
par(mfrow = c(2, 2))
plot(lm.1)
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2:]) + lm.1$coefficients[1]
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2:-1]) + lm.1$coefficients[1]
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2::]) + lm.1$coefficients[1]
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2,K]) + lm.1$coefficients[1]
sim<-as.matrix(df.test)%*%as.matrix(lm.1$coefficients[2:K]) + lm.1$coefficients[1]
lm.1$coefficients[2:K]
lm.1$coefficients
lm.1$coefficients[seq(2,K)]
as.matrix(lm.1$coefficients[seq(2,K)])
as.matrix(lm.1$coefficients[,seq(2,K)])
as.matrix(lm.1$coefficients[seq(2,K)])
lm.1$coefficients[seq(2,K)]
lm.1$coefficients[seq(2,K+1)]
K
lm.1$coefficients[seq(2,F)]
lm.1$coefficients[seq(2,1+F)]
